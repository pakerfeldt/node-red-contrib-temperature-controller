{
    "id": "7b528c333c30c8a0",
    "type": "subflow",
    "name": "temperature controller",
    "info": "A universal thermostat that can be used to alternately control a cooling unit and a heat source, for example, a refrigerator and a heating plate.\n\n## Details\nYou should regularly send temperature measurements to this node's input, and it will instruct you on when to turn on/off your cooling and heating unit to reach the target temperature.\n\n### Target temperature (°C)\nThis is your wanted temperature.\n\nDefault value is `18`°C but you really need to define this yourself.\n\n### Temperature difference (°C)\n* Cooling is triggered when the temperature measurement is greater than or equal to your target temperature + temperature difference.\n* Heating is triggered when the temperature measurement is less than or equal to your target temperature - temperature difference.\n\nA lower value of the temperature difference means this thermostat reacts quicker but could also lead to more starts and stops.\n\nDefault value is `2`°C.\n\n### Compressor delay (minutes)\nThe node has built-in support for compressor protection. As soon as cooling is stopped, it will not allow cooling again until at least this delay has elapsed, to avoid damaging the compressor.\nYou can turn compressor protection of by setting this value to 0.\n\nDefault value is `3` minutes.\n\n### Status object\nThe node will show its current state throught the status object. It will tell you when the thermostat is idling, heating, cooling or in a compressor delay state.\nIt also shows the most recent measurement received as well as the target temperature.\n\n## Inputs\nPlease note that any override of properties does not automatically trigger a change in cooling/heating until next measurement is sent.\n\n### payload\nGive temperature measurements in the payload as a number.\n\n### target\nYou may override the target temperature defined in the configuration of this node by passing in a new value in `msg.target`.\nValue must be a number. See documentation above for more details.\n\n### difference\nYou may override the temperature difference defined in the configuration of this node by passing in a new value in `msg.difference`.\nValue must be a number. See documentation above for more details.\n\n### compressor\nYou may override the compressor delay defined in the configuration of this node by passing in a new value in `msg.compressor`. \nValue must be a number. See documentation above for more details.\n\n## Outputs\nThis node has two outputs for controlling your cooler and heater. Both outputs emits a boolean to determine if your appliance should be turned on (`true`) or turned off (`false`).\nThe first output represents the cooler, and the second output represents the heater. Messages are sent with topic `cooler-controller` and `heater-controller` respectively so you could merge\nthem in your flow and use topic to distinguish.\n",
    "category": "smart home",
    "in": [
        {
            "x": 60,
            "y": 120,
            "wires": [
                {
                    "id": "61a506b329d2f807"
                }
            ]
        }
    ],
    "out": [
        {
            "x": 990,
            "y": 60,
            "wires": [
                {
                    "id": "640beebb8b61d56f",
                    "port": 0
                }
            ]
        },
        {
            "x": 530,
            "y": 120,
            "wires": [
                {
                    "id": "61a506b329d2f807",
                    "port": 2
                }
            ]
        }
    ],
    "env": [
        {
            "name": "TARGET_TEMPERATURE",
            "type": "num",
            "value": "18",
            "ui": {
                "icon": "font-awesome/fa-thermometer-half",
                "label": {
                    "en-US": "(°C) Target temp"
                },
                "type": "input",
                "opts": {
                    "types": [
                        "num"
                    ]
                }
            }
        },
        {
            "name": "TEMPERATURE_DIFFERENCE",
            "type": "num",
            "value": "2",
            "ui": {
                "icon": "font-awesome/fa-gears",
                "label": {
                    "en-US": "(°C) Temp difference"
                },
                "type": "input",
                "opts": {
                    "types": [
                        "num"
                    ]
                }
            }
        },
        {
            "name": "COMPRESSOR_DELAY_MINUTES",
            "type": "num",
            "value": "3",
            "ui": {
                "icon": "font-awesome/fa-clock-o",
                "label": {
                    "en-US": "(min) Compressor delay"
                },
                "type": "input",
                "opts": {
                    "types": [
                        "num"
                    ]
                }
            }
        }
    ],
    "meta": {
        "module": "Temperature Controller",
        "type": "smart home",
        "version": "1.0.0",
        "author": "Patrik Åkerfeldt <patrik.akerfeldt@gmail.com>",
        "desc": "A universal thermostat for heating and cooling.",
        "keywords": "temperature, controller, thermostat, heating, cooling",
        "license": "MIT"
    },
    "color": "#F3B567",
    "outputLabels": [
        "cooler",
        "heater"
    ],
    "icon": "node-red/trigger.svg",
    "status": {
        "x": 960,
        "y": 240,
        "wires": [
            {
                "id": "e228e71c848794ee",
                "port": 0
            },
            {
                "id": "61a506b329d2f807",
                "port": 3
            }
        ]
    },
    "flow": [
        {
            "id": "61a506b329d2f807",
            "type": "function",
            "z": "7b528c333c30c8a0",
            "name": "handle incoming message",
            "func": "const STATE_UNKNOWN = 0\nconst STATE_IDLE = 1\nconst STATE_COMPRESSOR_DELAY = 2\nconst STATE_COOLING = 3\nconst STATE_HEATING = 4\n\nconst TARGET = \"TARGET_TEMPERATURE\"\nconst DIFFERENCE = \"TEMPERATURE_DIFFERENCE\"\nconst COMPRESSOR = \"COMPRESSOR_DELAY_MINUTES\"\n\nlet compressorMsg = setOverrides(msg)\n\nlet targetTemperature = readVariable(TARGET)\nlet differenceSetValue = readVariable(DIFFERENCE)\nlet compressorDelayTimeMinutes = readVariable(COMPRESSOR)\nlet previousState = flow.get(\"CURRENT_STATE\") || STATE_UNKNOWN\nlet currentCompressorDelay = Math.max(0, ((flow.get(\"COMPRESSOR_STOPPED\") || 0) + compressorDelayTimeMinutes*60000) - new Date().getTime())\n\nlet measuredTemperature = msg.payload\n\nif (msg.context != null) {\n    flow.keys().forEach( it => \n        node.warn(it + \" = \" + flow.get(it))\n    )\n}\n\nif (measuredTemperature == null) {\n    return [compressorMsg, null, null, null]\n}\n\nif (targetTemperature == -99999) {\n    return [compressorMsg, null, null, error(\"Target temperature not set\")]\n}\n\nif (typeof measuredTemperature !== \"number\") {\n    return [compressorMsg, null, null, status(\n         \"NaN (\" + targetTemperature + \")\" + stateToText(previousState),\n        stateToColor(previousState),\n        stateToShape(previousState)\n    )]\n}\n\nflow.set(\"LAST_MEASURED_TEMPERATURE\", measuredTemperature)\n\nlet newState = STATE_UNKNOWN\nif (measuredTemperature >= targetTemperature + differenceSetValue) {\n    newState = STATE_COMPRESSOR_DELAY\n} else if (measuredTemperature <= targetTemperature - differenceSetValue) {\n    newState = STATE_HEATING\n} else {\n    newState = STATE_IDLE\n}\n\nlet coolingMsg = null\nlet heatingMsg = null\n\nif (newState != previousState) {\n    if (previousState == STATE_COOLING || previousState == STATE_COMPRESSOR_DELAY) {\n        coolingMsg = [{ reset: true}, { payload: false, delay: 0, topic: \"cooling-controller\" }]\n        if (previousState == STATE_COOLING) {\n            flow.set(\"COMPRESSOR_STOPPED\", new Date().getTime())\n        }\n    } else if (previousState == STATE_HEATING) {\n        heatingMsg = { payload: false, topic: \"heating-controller\" }\n    }\n    if (newState == STATE_COMPRESSOR_DELAY) {\n        coolingMsg = [{ reset: true}, { payload: true, delay: currentCompressorDelay, topic: \"cooling-controller\" }]\n    } else if (newState == STATE_HEATING) {\n        heatingMsg = { payload: true, topic: \"heating-controller\"}\n    }\n}\n\nlet now = new Date()\nlet compressorDelayDate = new Date(new Date().getTime() + currentCompressorDelay)\n\nlet statusMsg = status(\n    measuredTemperature + \"°C (\" + targetTemperature + \")\" + stateToText(newState, compressorDelayDate.getTime() > now.getTime() ? compressorDelayDate : now),\n    stateToColor(newState),\n    stateToShape(newState)\n    )\n\nreturn [\n    compressorMsg,\n    coolingMsg,\n    heatingMsg,\n    statusMsg\n]\n\nfunction error(text) {\n    return status(text, \"red\", \"dot\")\n}\n\nfunction status(text, fill, shape) {\n    return {\n        payload: { text, fill: fill, shape: shape }\n    }\n}\n\nfunction stateToText(state, compressorDelay) {\n    switch (state) {\n        case STATE_IDLE: return \" (idle)\"\n        case STATE_COMPRESSOR_DELAY: {\n            let delay = compressorDelay.toLocaleTimeString([], {\n                    hour: '2-digit',\n                    minute: '2-digit',\n                    hour12: false\n            });\n            return ` (compressor delay ${delay})`\n        }\n        case STATE_HEATING: return \" (heating)\"\n        default: return \"\"\n    }\n}\n\nfunction stateToColor(state) {\n    switch (state) {\n        case STATE_IDLE: return \"grey\"\n        case STATE_COMPRESSOR_DELAY: case STATE_COOLING: return \"blue\"\n        case STATE_HEATING: return \"green\"\n        default: return \"grey\"\n    }\n}\n\nfunction stateToShape(state) {\n    switch (state) {\n        case STATE_COMPRESSOR_DELAY: return \"ring\"\n        default: return \"dot\"\n    }\n}\n\nfunction setOverrides(msg) {\n    let compressorMsg = null\n    if (msg.target != null) {\n        if (typeof msg.target == \"number\") {\n            flow.set(TARGET, msg.target)\n        } else {\n            node.warn(\"msg.target is not a number: \" + msg.target)\n        }     \n    }\n\n    if (msg.difference != null) {\n        if (typeof msg.difference == \"number\") {\n            flow.set(DIFFERENCE, msg.difference)\n        } else {\n            node.warn(\"msg.difference is not a number: \" + msg.difference)\n        }\n    }\n\n    if (msg.compressor != null) {\n        if (typeof msg.compressor == \"number\") {\n            let previousCompressorDelay = readVariable(COMPRESSOR)\n            flow.set(COMPRESSOR, msg.compressor)\n            if (previousCompressorDelay != msg.compressor) {\n                compressorMsg = { flush: true }\n            }\n        } else {\n            node.warn(\"msg.compressor is not a number: \" + msg.compressor)\n        }\n    }\n    return compressorMsg\n}\n\nfunction readVariable(name) {\n    let value = flow.get(name)\n    if (value == null) {\n        return env.get(name)\n    }\n    return value\n}",
            "outputs": 4,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 280,
            "y": 120,
            "wires": [
                [
                    "842ef249df079949"
                ],
                [
                    "842ef249df079949"
                ],
                [],
                []
            ]
        },
        {
            "id": "842ef249df079949",
            "type": "delay",
            "z": "7b528c333c30c8a0",
            "name": "apply compressor delay",
            "pauseType": "delayv",
            "timeout": "1",
            "timeoutUnits": "milliseconds",
            "rate": "1",
            "nbRateUnits": "0",
            "rateUnits": "second",
            "randomFirst": "1",
            "randomLast": "5",
            "randomUnits": "seconds",
            "drop": true,
            "allowrate": false,
            "outputs": 1,
            "x": 590,
            "y": 60,
            "wires": [
                [
                    "e228e71c848794ee",
                    "640beebb8b61d56f"
                ]
            ]
        },
        {
            "id": "e228e71c848794ee",
            "type": "function",
            "z": "7b528c333c30c8a0",
            "name": "set cooling state",
            "func": "if (msg.payload == true) {\n    flow.set(\"CURRENT_STATE\", 3)\n    let lastMeasurement = flow.get(\"LAST_MEASURED_TEMPERATURE\")\n    let targetTemperature = flow.get(\"TARGET_TEMPERATURE\")\n    return {\n        payload: {\n            text: lastMeasurement + \"°C (\" + targetTemperature + \") (cooling)\",\n            fill: \"blue\",\n            shape: \"dot\"\n        }\n    }\n}\n",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 820,
            "y": 120,
            "wires": [
                []
            ]
        },
        {
            "id": "640beebb8b61d56f",
            "type": "function",
            "z": "7b528c333c30c8a0",
            "name": "pass only payload",
            "func": "if (msg.payload != null) {\n    return msg\n}",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 830,
            "y": 60,
            "wires": [
                []
            ]
        }
    ]
}